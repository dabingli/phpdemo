
# 开启二进制日志文件
log_bin=binary-log
server_id=1
# 可指定数据库
binlog-do-db=dianpos
binlog-do-db=site
binlog-do-db=test


查看是否启用了日志

　　mysql>show variables like 'log_bin';

　　查看当前的日志

　　mysql>show master status;

　　看二进制日志文件用mysqlbinlog

　　shell>mysqlbinlog mail-bin.000001

查看表字段信息
show columns from user



-------------------------------- 全备份+增量备份+二进制日志 ------------------------------

演示备份的过程;

2.3 先给数据库做完全备份：

 [root@www ~]# mysqldump -uroot --single-transaction --master-data=2 --databases hellodb > /backup/hellodb_`date +%F`.sql

--single-transaction: 基于此选项能实现热备InnoDB表；因此，不需要同时使用--lock-all-tables；
--master-data=2  记录备份那一时刻的二进制日志的位置，并且注释掉，1是不注释的
--databases hellodb 指定备份的数据库
然后回到mysql服务器端， 
 


2.4回到mysql服务器端更新数据

mysql> create table tb1(id int); 创建表
mysql> insert into tb1 values (1),(2),(3);  插入数据，这里只做演示，随便插入了几个数据
2.5先查看完全备份文件里边记录的位置：

[root@www backup]# cat hellodb_2013-09-08.sql | less
-- CHANGE MASTER TO MASTER_LOG_FILE='mysql-bin.000013', MASTER_LOG_POS=15684; 记录了二进制日志的位置
2.6 在回到服务器端：

复制代码
mysql> show master status;
显示此时的二进制日志的位置，从备份文件里边记录的位置到我们此时的位置，即为增量的部分
+------------------+----------+--------------+------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+------------------+----------+--------------+------------------+
| mysql-bin.000004 |      15982 |              |                  |
+------------------+----------+--------------+------------------+
复制代码
2.7做增量备份

[root@www backup]# mysqlbinlog --start-position=15694 --stop-position=15982
/mydata/data/mysql-bin.000013 > /backup/hellodb_`date +$F_%H`.sql
2.8再回到服务器

mysql> insert into tb1 values (4),(5); 在插入一些数值
mysql> drop database hellodb;   删除hellodb库 
2.9导出这次得二进制日志：

mysqlbinlog --start-position=15982 /mydata/data/mysql-bin.000013 
查看删除操作时二进制日志的位置
# mysqlbinlog --start-position=15982 --stop-position=16176 /mydata/data/mysql-bin.000013 > /tmp/hellodb.sql  
//导出二进制日志 
2.10先让mysql离线

mysql> set sql_log_bin=0;  关闭二进制日志
mysql> flush logs; 滚动下日志 
2.11模拟数据库损坏

mysql> drop database hellodb;
2.12开始恢复数据：

[root@www ]# mysql < /backup/hellodb_2013-09-08.sql  
//导入完全备份文件
[root@www ]# mysql < /backup/hellodb_2013-09-08_05.sql 
//导入增量备份文件
[root@www ]# mysql< hellodb.sql 
//导入二进制文件
验证完成，显示结果为我们预想的那样

注：

1、真正在生产环境中，我们应该导出的是整个mysql服务器中的数据，而不是单个库，因此应该使用--all-databases
2、在导出二进制日志的时候，可以直接复制文件即可，但是要注意的是，备份之前滚动下日志。
3、利用lvm快照实现几乎热备的数据备份与恢复



 mysqlbinlog恢复数据的方法很灵活，可以通过时间点与位置点进行恢复如：
【也可以直接备份二进制日志，直接用二进制日志恢复】

/usr/local/mysql/bin/mysqlbinlog ―start-datetime=‘2014-01-20 8:00:00’\
―stop-datetime=‘2014-01-22 19:00:00' xxx-bin.000001\
| /usr/local/mysql/bin/mysql -uroot -p123456 -h127.0.0.1
#表示重做xxx-bin.000001文件里从2014-01-20 8:00:00到
2014-01-22 19:00:00这个时间范围内的操作。

/usr/local/mysql/bin/mysqlbinlog --start-position=368315\
xxx-bin.000001 | /usr/local/mysql/bin/mysql\
-uroot -p123456 -h127.0.0.1
#表示重做xxx-bin.000001文件内从位置368315开始直到文件末尾的操作。
